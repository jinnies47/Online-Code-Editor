{"version":3,"sources":["components/Codepen components/Editor.js","components/hooks/useLocalStorage.js","components/Codepen components/App.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","type","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAUe,SAASA,EAAOC,GAC7B,IACEC,EAIED,EAJFC,SACAC,EAGEF,EAHFE,YACAC,EAEEH,EAFFG,MACAC,EACEJ,EADFI,SAEF,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAMA,OACE,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACE,sBAAKE,UAAU,eAAf,UACGN,EACD,wBACEO,KAAK,SACLD,UAAU,sBACVE,QAAS,kBAAMH,GAAQ,SAAAI,GAAQ,OAAKA,MAHtC,SAKE,cAAC,IAAD,CAAiBC,KAAMN,EAAOO,IAAgBC,WAGlD,cAAC,aAAD,CACEC,eAjBN,SAAsBC,EAAQC,EAAMd,GAClCC,EAASD,IAiBLA,MAAOA,EACPK,UAAU,sBACVU,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,KAAMpB,EACNqB,MAAO,WACPC,aAAa,QCxCR,SAASC,EAAgBC,EAAKC,GAC3C,IAAMC,EAHO,iBAGgBF,EAE7B,EAA0BpB,oBAAS,WACjC,IAAMuB,EAAYC,aAAaC,QAAQH,GACvC,OAAiB,MAAbC,EAA0BG,KAAKC,MAAMJ,GAEb,oBAAjBF,EACFA,IAEAA,KAPX,mBAAOvB,EAAP,KAAc8B,EAAd,KAeA,OAJAC,qBAAU,WACRL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUjC,MAChD,CAACwB,EAAaxB,IAEV,CAACA,EAAO8B,GCsCFI,MAxDf,WACE,MAAwBb,EAAgB,OAAQ,IAAhD,mBAAOc,EAAP,KAAaC,EAAb,KACA,EAAsBf,EAAgB,MAAO,IAA7C,mBAAOgB,EAAP,KAAYC,EAAZ,KACA,EAAoBjB,EAAgB,KAAM,IAA1C,mBAAOkB,EAAP,KAAWC,EAAX,KACA,EAA4BtC,mBAAS,IAArC,mBAAOuC,EAAP,KAAeC,EAAf,KAgBA,OAdAX,qBAAU,WACR,IAAMY,EAAUC,YAAW,WACzBF,EAAU,qCAAD,OAEGP,EAFH,qCAGIE,EAHJ,uCAIKE,EAJL,0CAOR,KAEH,OAAO,kBAAMM,aAAaF,MACzB,CAACR,EAAME,EAAKE,IAGb,qCACE,sBAAKlC,UAAU,gBAAf,UACE,cAACT,EAAD,CACEE,SAAS,MACTC,YAAY,OACZC,MAAOmC,EACPlC,SAAUmC,IAEZ,cAACxC,EAAD,CACEE,SAAS,MACTC,YAAY,MACZC,MAAOqC,EACPpC,SAAUqC,IAEZ,cAAC1C,EAAD,CACEE,SAAS,aACTC,YAAY,KACZC,MAAOuC,EACPtC,SAAUuC,OAGd,qBAAKnC,UAAU,MAAf,SACE,wBACEoC,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,eChDjBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.633f551e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCompressAlt, faExpandAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default function Editor(props) {\r\n  const {\r\n    language,\r\n    displayName,\r\n    value,\r\n    onChange\r\n  } = props\r\n  const [open, setOpen] = useState(true)\r\n\r\n  function handleChange(editor, data, value) {\r\n    onChange(value)\r\n  }\r\n\r\n  return (\r\n    <div className={`editor-container ${open ? '' : 'collapsed'}`}>\r\n      <div className=\"editor-title\">\r\n        {displayName}\r\n        <button\r\n          type=\"button\"\r\n          className=\"expand-collapse-btn\"\r\n          onClick={() => setOpen(prevOpen => !prevOpen)}\r\n        >\r\n          <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\r\n        </button>\r\n      </div>\r\n      <ControlledEditor\r\n        onBeforeChange={handleChange}\r\n        value={value}\r\n        className=\"code-mirror-wrapper\"\r\n        options={{\r\n          lineWrapping: true,\r\n          lint: true,\r\n          mode: language,\r\n          theme: 'material',\r\n          lineNumbers: true\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}","import { useEffect, useState } from 'react'\r\n\r\nconst PREFIX = 'codepen-clone-'\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key\r\n\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey)\r\n    if (jsonValue != null) return JSON.parse(jsonValue)\r\n\r\n    if (typeof initialValue === 'function') {\r\n      return initialValue()\r\n    } else {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n  }, [prefixedKey, value])\r\n\r\n  return [value, setValue]\r\n}","import React, { useState, useEffect } from 'react'\r\nimport Editor from './Editor'\r\nimport useLocalStorage from '../hooks/useLocalStorage'\r\n\r\nfunction App() {\r\n  const [html, setHtml] = useLocalStorage('html', '')\r\n  const [css, setCss] = useLocalStorage('css', '')\r\n  const [js, setJs] = useLocalStorage('js', '')\r\n  const [srcDoc, setSrcDoc] = useState('')\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setSrcDoc(`\r\n        <html>\r\n          <body>${html}</body>\r\n          <style>${css}</style>\r\n          <script>${js}</script>\r\n        </html>\r\n      `)\r\n    }, 250)\r\n\r\n    return () => clearTimeout(timeout)\r\n  }, [html, css, js])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"pane top-pane\">\r\n        <Editor\r\n          language=\"xml\"\r\n          displayName=\"HTML\"\r\n          value={html}\r\n          onChange={setHtml}\r\n        />\r\n        <Editor\r\n          language=\"css\"\r\n          displayName=\"CSS\"\r\n          value={css}\r\n          onChange={setCss}\r\n        />\r\n        <Editor\r\n          language=\"javascript\"\r\n          displayName=\"JS\"\r\n          value={js}\r\n          onChange={setJs}\r\n        />\r\n      </div>\r\n      <div className=\"ane\">\r\n        <iframe\r\n          srcDoc={srcDoc}\r\n          title=\"output\"\r\n          sandbox=\"allow-scripts\"\r\n          frameBorder=\"0\"\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/Codepen components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}